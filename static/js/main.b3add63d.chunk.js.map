{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","API/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","images/image.png","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varaint","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Countries","handleCountryChange","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","event","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","CountryPicker","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3add63d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport {Card, CardContent,Typography,Grid} from '@material-ui/core'\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nconst Cards = ({ data: {confirmed, recovered,deaths,lastUpdate} }) => {\n    // console.log(confirmed)\n    if(!confirmed) {\n        return \"Loading ...\"\n    }\n\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography varaint=\"h5\">\n                            <CountUp  start={0} end={confirmed.value} duration={2.5} separator=\",\" />\n                            </Typography>\n                            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString() }</Typography>\n                        <Typography varaint=\"body2\">Number of active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography varaint=\"h5\">\n                            <CountUp  start={0} end={recovered.value} duration={2.5} separator=\",\" />\n                            </Typography>\n                            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString() }</Typography>\n                        <Typography varaint=\"body2\">Number of Recovered cases from COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3}className={cx(styles.card,styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography varaint=\"h5\">\n                            <CountUp  start={0} end={deaths.value} duration={2.5} separator=\",\" />\n                            </Typography>\n                            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString() }</Typography>\n                        <Typography varaint=\"body2\">Number of deaths by COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default Cards;\n","import axios from 'axios';\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n        let changeableUrl = url;\n\n        if(country) {\n            changeableUrl = `${url}/countries/${country}`\n        }\n    try {\n        const {data} = await axios.get(changeableUrl);\n\n        const modifiedData = {\n            confirmed: data.confirmed,\n            recovered: data.recovered,\n            deaths:    data.deaths,\n            lastUpdate: data.lastUpdate\n        }\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`${url}/daily`)\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }))\n        return modifiedData;\n    } catch (error) {\n    }\n}\n\n\n\nexport const fetchCountries = async () => {\n    try {\n        const {data: { countries }} = await axios.get(`${url}/countries`);\n            return countries.map((country)=> country.name);\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n","import React, { useState,useEffect} from 'react'\nimport { fetchDailyData } from '../../API/';\nimport {Line, Bar} from 'react-chartjs-2';\nimport styles from './Chart.module.css'\n\n\n\nexport default function Chart({data,country}) {\n    \n    const [dailyData,setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n\n        fetchAPI();\n    });\n\n    const lineChart = (\n        dailyData.length !== 0\n        ? (\n        <Line \n        data={{\n            labels: dailyData.map(({date}) => date),\n            datasets: [{\n                data: dailyData.map(({ confirmed }) => confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true\n\n            },{\n                data: dailyData.map(({ deaths }) => deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor: 'rgba(255,0,0,0.5)',\n                fill: true,\n            }]\n        }}\n         />\n         ) : null\n    );\n\n\n    const barChart = (\n        data.confirmed ? (\n          <Bar\n            data={{\n              labels: ['Infected', 'Recovered', 'Deaths'],\n              datasets: [\n                {\n                  label: 'People',\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                  data: [data.confirmed.value, data.recovered.value, data.deaths.value],\n                },\n              ],\n            }}\n            options={{\n              legend: { display: false },\n              title: { display: true, text: `Current state in ${country}` },\n            }}\n          />\n        ) : null\n      );\n    \n\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart :lineChart }\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../API\";\nimport styles from \"./CountryPicker.module.css\";\n\nconst Countries = ({ handleCountryChange }) => {\n    const [countries, setCountries] = useState([]);\n  \n    useEffect(() => {\n      const fetchAPI = async () => {\n        setCountries(await fetchCountries());\n      };\n  \n      fetchAPI();\n    }, []);\n\n    return (\n        <FormControl className={styles.formControl}>\n          <NativeSelect defaultValue=\"\" onChange={(event) => handleCountryChange(event.target.value)}>\n            <option value=\"\">Global</option>\n            {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n          </NativeSelect>\n        </FormControl>\n      );\n    };\nexport default Countries;\n","import React from 'react';\n\nimport styles from'./App.module.css';\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport coronaImage from './images/image.png'\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport { fetchData } from \"./API/\";\n\nclass App extends React.Component {\n   state = {\n      data: {},\n      country: ''\n   }\n  async componentDidMount() {\n    const data = await fetchData()\n      this.setState({data: data})\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    // console.log(fetchedData);\n    // console.log(country);\n    this.setState({data: fetchedData,country: country})\n  }\n\n  render() {\n    return (\n      <>\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"COVIDIMAGE\"/>\n      <Cards data={this.state.data}/>\n      <CountryPicker handleCountryChange={this.handleCountryChange}/>\n      <Chart data={this.state.data} country={this.state.country}/>      \n      </div>\n\n      </>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}